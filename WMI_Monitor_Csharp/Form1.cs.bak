using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Management;
using System.Windows.Forms.DataVisualization.Charting;

namespace WMI_Monitor_Csharp
{
    public partial class Form1 : Form
    {

        ManagementScope scope;
        SelectQuery query;
        ManagementObjectSearcher searcher;

        String cpunameStr, cputotalnameStr, cputotaltempStr, cputotalloadStr;
        String cpucorefreqStr, cpucorenameStr, cpucoretempStr, cpucoreloadStr;
        String gpunameStr, gpucorenameStr, gpucoretempStr, gpucoreloadStr, gpucorefreqStr;
        String hddnameStr, hddfreespaceStr, hddsizeStr, hddfreeprctStr;
        String osramusedStr, osramsizeStr, osramfreeprctStr;
        String ramnameStr, ramfreqStr, ramsizeStr;
        String fannameStr, fanspeedStr;
        int cputotalpbNum, cpuCount, cntr, gpu1pbNum, fanNum;
        Control pb;
        List<XY> chartXY;

        public Form1()
        {
            InitializeComponent();

            //=================================================== 
            // Setup stuff
            //===================================================

            cpuname.Text = cputotalname.Text = cputotaltemp.Text = cputotalload.Text = "";
            cpucorefreq.Text = cpucorename.Text = cpucoretemp.Text = cpucoreload.Text = "";
            gpuname.Text = gpucorename.Text = gpucoretemp.Text = gpucoreload.Text = gpucorefreq.Text = "";
            hddname.Text = hddfreespace.Text = hddsize.Text = hddfreeprct.Text = "";
            osramused.Text = osramsize.Text = osramfreeprct.Text = "";
            ramname.Text = ramfreq.Text = ramsize.Text = "";
            fanname.Text = fanname.Text = "";

            cpunameStr = cputotalnameStr = cputotaltempStr = cputotalloadStr = "";
            cpucorefreqStr = cpucorenameStr = cpucoretempStr = cpucoreloadStr = "";
            gpunameStr = gpucorenameStr = gpucoretempStr = gpucoreloadStr = gpucorefreqStr = "";
            hddnameStr = hddfreespaceStr = hddsizeStr = hddfreeprctStr = "";
            osramusedStr = osramsizeStr = osramfreeprctStr = "";
            ramnameStr = ramfreqStr = ramsizeStr = "";
            fannameStr = fanspeedStr = "";

            cputotalpbNum = gpu1pbNum = fanNum = 0;

            chartXY = new List<XY>();
                    
            for (int i = 0; i < 50; i++)
            {
                chartXY.Add(new XY(i, 0, 0, 0));
            }

            chart1.DataSource = chartXY;
            chart1.DataBind();

            //=================================================== 
            // CPU stuff
            //===================================================
            
            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Temperature' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            double tot = 0.0;
            cpuCount = 0;
            cpucorenameStr = cpucoretempStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                if (envVar["SensorType"].Equals("Temperature"))
                {
                    float flt = (float)envVar["Value"];
                    tot += (double)(0.0 + flt);
                    cpuCount += 1;
                    cpucorenameStr += ((String)envVar["Name"] + "\r\n");
                    cpucoretempStr += ("" + envVar["Value"] + (char)176 + "C\r\n");
                }
            }
            cpucorename.Text = cpucorenameStr;
            cpucoretemp.Text = cpucoretempStr;
            cputotaltemp.Text += ("" + (tot / (double)cpuCount).ToString("F0") + (char)176 + "C\r\n");

            /*
            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Temperature' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cpucorenameStr = cpucoretempStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                cpucorenameStr += ((String)envVar["Name"] + "\r\n");
                cpucoretempStr += ("" + envVar["Value"] + (char)176 + "C\r\n");
            }
            cpucorename.Text = cpucorenameStr;
            cpucoretemp.Text = cpucoretempStr;
            */

            
            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Load' And Name Like 'CPU Total%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cputotalnameStr = cputotalloadStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                cputotalnameStr += ((String)envVar["Name"]);
                float flt = (float)envVar["Value"];
                cputotalpbNum = (int)flt;
                cputotalloadStr += ("" + (String)(flt.ToString("F1")) + " %");
            }
            cputotalname.Text = cputotalnameStr;
            cputotalload.Text = cputotalloadStr;
            cputotalpb.Value = cputotalpbNum;
            

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Hardware", "HardwareType='CPU'");
            searcher = new ManagementObjectSearcher(scope, query);
            cpunameStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                cpunameStr += ((String)envVar["Name"] + "\r\n");
            }
            cpuname.Text = cpunameStr;


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Load' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cpucoreloadStr = "";
            cntr = 1;
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float dbl = (float)envVar["Value"];
                cpucoreloadStr += ("" + (String)(dbl.ToString("F1")) + " %\r\n");
                pb = Controls.Find("cpu" + cntr + "pb", true)[0];
                (pb as ProgressBar).Value = (int)dbl;
                cntr += 1;
            }
            cntr = 1;
            cpucoreload.Text = cpucoreloadStr;
            cpucoreload.Height = 16 * cpuCount;
            ProgressBar pb1 = new ProgressBar();

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Clock' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cpucorefreqStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float c = (float)envVar["Value"];
                c /= (float)1024.0;
                cpucorefreqStr += ("" + (String)(c.ToString("F2")) + " GHz\r\n");
            }
            cpucorefreq.Text = cpucorefreqStr;

            //=================================================== 
            // GPU stuff
            //===================================================

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Hardware", "HardwareType='GpuAti'");
            searcher = new ManagementObjectSearcher(scope, query);
            gpunameStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                gpunameStr += ("" + envVar["Name"] + "");
            }
            gpuname.Text = gpunameStr;


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Temperature' And Name Like 'GPU%'");
            searcher = new ManagementObjectSearcher(scope, query);
            gpucorenameStr = gpucoretempStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                gpucorenameStr += ((String)envVar["Name"] + "\r\n");
                gpucoretempStr += ("" + envVar["Value"] + (char)176 + "C\r\n");
            }
            gpucorename.Text = gpucorenameStr;
            gpucoretemp.Text = gpucoretempStr;


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Load' And Name Like 'GPU%'");
            searcher = new ManagementObjectSearcher(scope, query);
            gpucoreloadStr = "";
            gpu1pbNum = 0;
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float dbl = (float)envVar["Value"];
                gpu1pbNum = (int)dbl;
                gpucoreloadStr += ("" + (String)(dbl.ToString("F1")) + " %\r\n");
            }
            gpucoreload.Text = gpucoreloadStr;
            gpu1pb.Value = gpu1pbNum;


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Clock' And Name Like 'GPU Core%'");
            searcher = new ManagementObjectSearcher(scope, query);
            gpucorefreqStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float c = (float)envVar["Value"];
                gpucorefreqStr += ("" + (String)(c.ToString("F0")) + "MHz");
            }
            gpucorefreq.Text = gpucorefreqStr;

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Clock' And Name Like 'GPU Memory%'");
            searcher = new ManagementObjectSearcher(scope, query);
            //gpucorefreqStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float m = (float)envVar["Value"] / (float)1024;
                gpucorefreqStr += (" / " + (String)(m.ToString("F1")) + "GHz\r\n");
            }
            gpucorefreq.Text = gpucorefreqStr;

            //=================================================== 
            // HDD stuff
            //===================================================

            scope = new ManagementScope("\\root\\cimv2");
            query = new SelectQuery("Win32_LogicalDisk");
            searcher = new ManagementObjectSearcher(scope, query);
            hddnameStr = hddfreespaceStr = hddsizeStr = hddfreeprctStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                UInt64 fs, s;
                double dfs, ds, dfsp;
                if (envVar["FreeSpace"] != null)
                {
                    fs = (UInt64)envVar["FreeSpace"];
                    s = (UInt64)envVar["Size"];
                    fs = (fs / 1024) / 1024;
                    s = (s / 1024) / 1024;
                    dfs = ((double)fs / 1024.0);
                    ds = ((double)s / 1024.0);
                    dfsp = (dfs / ds) * 100;
                    hddnameStr += ("" + (String)envVar["Name"] + " (" + (String)envVar["VolumeName"] + ")\r\n");
                    hddfreespaceStr += ("" + dfs.ToString("F1") + " GB   of\r\n");
                    hddsizeStr += ("" + ds.ToString("F1") + " GB\r\n");
                    hddfreeprctStr += ("" + dfsp.ToString("F1") + " %\r\n");
                }
            }
            hddname.Text = hddnameStr;
            hddfreespace.Text = hddfreespaceStr;
            hddsize.Text = hddsizeStr;
            hddfreeprct.Text = hddfreeprctStr;


            scope = new ManagementScope("\\root\\cimv2");
            query = new SelectQuery("Win32_OperatingSystem");
            searcher = new ManagementObjectSearcher(scope, query);
            osramsizeStr = osramusedStr = osramfreeprctStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                UInt64 fm, m, um;
                double dfm, dm, dum, dfmp;
                if (envVar["FreePhysicalMemory"] != null)
                {
                    fm = (UInt64)envVar["FreePhysicalMemory"];
                    m = (UInt64)envVar["TotalVisibleMemorySize"];
                    um = m - fm;
                    dfm = ((double)fm / 1024.0) / 1024.0;
                    dm = ((double)m / 1024.0) / 1024.0;
                    dum = ((double)um / 1024.0) / 1024.0;
                    dfmp = (dum / dm) * 100;
                    osramsizeStr += ("Total: " + dm.ToString("F2") + " GB\r\n");
                    osramusedStr += ("Used: " + dum.ToString("F2") + " GB\r\n"); ;
                    osramfreeprctStr += ("" + dfmp.ToString("F1") + " %\r\n");
                }
            }
            osramsize.Text = osramsizeStr;
            osramused.Text = osramusedStr;
            osramfreeprct.Text = osramfreeprctStr;

            //=================================================== 
            // Memory stuff
            //===================================================

            scope = new ManagementScope("\\root\\cimv2");
            query = new SelectQuery("Win32_PhysicalMemory");
            searcher = new ManagementObjectSearcher(scope, query);
            ramnameStr = ramfreqStr = ramsizeStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                UInt64 f, c;
                double df, dc, dfcp;
                if (envVar["Capacity"] != null)
                {
                    f = (UInt32)envVar["Speed"];
                    c = (UInt64)envVar["Capacity"];
                    df = ((double)f / 1024.0);
                    dc = (((double)c / 1024.0) / 1024.0) / 1024.0;
                    dfcp = (df / dc) * 100;
                    ramnameStr += ("" + (String)envVar["BankLabel"] + "\r\n");
                    ramfreqStr += ("" + f.ToString("F0") + " MHz\r\n");
                    ramsizeStr += ("" + dc.ToString("F2") + " GB\r\n");
                }
            }
            ramname.Text = ramnameStr;
            ramfreq.Text = ramfreqStr;
            ramsize.Text = ramsizeStr;

            //=================================================== 
            // FAN stuff
            //===================================================

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Fan' Or SensorType='Control'");
            searcher = new ManagementObjectSearcher(scope, query);
            fannameStr = "";
            fanspeedStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                fannameStr += ("" + envVar["Name"] + "\r\n");
                if (envVar["Name"].Equals("GPU Fan"))
                {
                    fanspeedStr += ("" + envVar["Value"] + " %\r\n");
                }
                else
                {
                    fanspeedStr += ("" + ((float)envVar["Value"]).ToString("F0") + " RPM\r\n");
                }
            }
            fanname.Text = fannameStr;
            fanspeed.Text = fanspeedStr;

            //=================================================== 
            // Done with static
            //===================================================

        }

        public class XY
        {
            public double X;
            public double cpuY;
            public double gpuY;
            public double memY;

            public double XValue
            {
                get { return X; }
                set { X = value; }
            }

            public double CPUYValue
            {
                get { return cpuY; }
                set { cpuY = value; }
            }

            public double GPUYValue
            {
                get { return gpuY; }
                set { gpuY = value; }
            }

            public double MEMYValue
            {
                get { return memY; }
                set { memY = value; }
            }
            public XY(double X, double cpuY, double gpuY, double memY)
            {
                this.X = X;
                this.cpuY = cpuY;
                this.gpuY = gpuY;
                this.memY = memY;
            }
        }

        private void timerFast_Tick(object sender, EventArgs e)
        {
            //=================================================== 
            // Graph stuff
            //===================================================           
            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Load' And Name Like 'CPU Total%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cputotalloadStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                //cputotalname.Text += ((String)envVar["Name"]);
                float flt = (float)envVar["Value"];
                cputotalpbNum = (int)flt;
                cputotalloadStr += ("" + (String)(flt.ToString("F1")) + " %");
            }
            cputotalload.Text = cputotalloadStr;
            cputotalpb.Value = cputotalpbNum;

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Load' And Name Like 'GPU%'");
            searcher = new ManagementObjectSearcher(scope, query);
            gpucoreloadStr = "";
            gpu1pbNum = 0;
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float dbl = (float)envVar["Value"];
                gpu1pbNum = (int)dbl;
                gpucoreloadStr += ("" + (String)(dbl.ToString("F1")) + " %\r\n");
            }
            gpucoreload.Text = gpucoreloadStr;
            gpu1pb.Value = gpu1pbNum;

            scope = new ManagementScope("\\root\\cimv2");
            query = new SelectQuery("Win32_OperatingSystem");
            searcher = new ManagementObjectSearcher(scope, query);
            osramsizeStr = osramusedStr = osramfreeprctStr = "";
            int osramfreeprctNUM = 0;
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                UInt64 fm, m, um;
                double dfm, dm, dum, dfmp;
                if (envVar["FreePhysicalMemory"] != null)
                {
                    fm = (UInt64)envVar["FreePhysicalMemory"];
                    m = (UInt64)envVar["TotalVisibleMemorySize"];
                    um = m - fm;
                    dfm = ((double)fm / 1024.0) / 1024.0;
                    dm = ((double)m / 1024.0) / 1024.0;
                    dum = ((double)um / 1024.0) / 1024.0;
                    dfmp = (dum / dm) * 100;
                    osramfreeprctNUM = (int)dfmp;
                    osramsizeStr += ("Total: " + dm.ToString("F2") + " GB\r\n");
                    osramusedStr += ("Used: " + dum.ToString("F2") + " GB\r\n"); ;
                    osramfreeprctStr += ("" + dfmp.ToString("F1") + " %\r\n");
                }
            }
            osramsize.Text = osramsizeStr;
            osramused.Text = osramusedStr;
            osramfreeprct.Text = osramfreeprctStr;

            for (int i = 0; i < 49; i++)
            {
                chartXY.ElementAt(i).CPUYValue = chartXY.ElementAt(i + 1).CPUYValue;
                chartXY.ElementAt(i).GPUYValue = chartXY.ElementAt(i + 1).GPUYValue;
                chartXY.ElementAt(i).MEMYValue = chartXY.ElementAt(i + 1).MEMYValue;
            }
            chartXY.ElementAt(49).CPUYValue = cputotalpbNum;
            chartXY.ElementAt(49).GPUYValue = gpu1pbNum;
            chartXY.ElementAt(49).MEMYValue = osramfreeprctNUM;

            chart1.DataBind();

            //=====================================================
            // CPU Stuff
            //=====================================================

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Temperature' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            double tot = 0.0;
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float flt = (float)envVar["Value"];
                tot += (double)(0.0 + flt);
            }
            cputotaltemp.Text = ("" + (tot / (double)cpuCount).ToString("F0") + (char)176 + "C\r\n");


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Temperature' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cpucoretempStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                //cpucorename.Text += ((String)envVar["Name"] + "\r\n");
                cpucoretempStr += ("" + envVar["Value"] + (char)176 + "C\r\n");
            }
            cpucoretemp.Text = cpucoretempStr;


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Load' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cpucoreloadStr = "";
            cntr = 1;
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float dbl = (float)envVar["Value"];
                cpucoreloadStr += ("" + (String)(dbl.ToString("F1")) + " %\r\n");
                pb = Controls.Find("cpu" + cntr + "pb", true)[0];
                (pb as ProgressBar).Value = (int)dbl;
                cntr += 1;
            }
            cntr = 1;
            cpucoreload.Text = cpucoreloadStr;


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Clock' And Name Like 'CPU Core #%'");
            searcher = new ManagementObjectSearcher(scope, query);
            cpucorefreqStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float c = (float)envVar["Value"];
                c /= (float)1024.0;
                cpucorefreqStr += ("" + (String)(c.ToString("F2")) + " GHz\r\n");
            }
            cpucorefreq.Text = cpucorefreqStr;

            //=================================================== 
            // GPU stuff
            //===================================================

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Temperature' And Name Like 'GPU%'");
            searcher = new ManagementObjectSearcher(scope, query);
            gpucorenameStr = gpucoretempStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                //gpucorenameStr += ((String)envVar["Name"] + "\r\n");
                gpucoretempStr += ("" + envVar["Value"] + (char)176 + "C\r\n");
            }
            //gpucorename.Text = gpucorenameStr;
            gpucoretemp.Text = gpucoretempStr;


            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Clock' And Name Like 'GPU Core%'");
            searcher = new ManagementObjectSearcher(scope, query);
            gpucorefreqStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float c = (float)envVar["Value"];
                gpucorefreqStr += ("" + (String)(c.ToString("F0")) + "MHz");
            }
            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Clock' And Name Like 'GPU Memory%'");
            searcher = new ManagementObjectSearcher(scope, query);
            //gpucorefreqStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                float m = (float)envVar["Value"] / (float)1024;
                gpucorefreqStr += (" / " + (String)(m.ToString("F1")) + "GHz\r\n");
            }
            gpucorefreq.Text = gpucorefreqStr;

            //=================================================== 
            // FAN stuff
            //===================================================

            scope = new ManagementScope("\\root\\OpenHardwareMonitor");
            query = new SelectQuery("Sensor", "SensorType='Fan' Or SensorType='Control'");
            searcher = new ManagementObjectSearcher(scope, query);
            fannameStr = "";
            fanspeedStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                fannameStr += ("" + envVar["Name"] + "\r\n");
                if (envVar["Name"].Equals("GPU Fan"))
                {
                    fanspeedStr += ("" + envVar["Value"] + " %\r\n");
                }
                else
                {
                    fanspeedStr += ("" + ((float)envVar["Value"]).ToString("F0") + " RPM\r\n");
                }
            }
            fanname.Text = fannameStr;
            fanspeed.Text = fanspeedStr;
        }

        private void timerSlow_Tick(object sender, EventArgs e)
        {
            scope = new ManagementScope("\\root\\cimv2");
            query = new SelectQuery("Win32_LogicalDisk");
            searcher = new ManagementObjectSearcher(scope, query);
            hddnameStr = hddfreespaceStr = hddsizeStr = hddfreeprctStr = "";
            foreach (ManagementBaseObject envVar in searcher.Get())
            {
                UInt64 fs, s;
                double dfs, ds, dfsp;
                if (envVar["FreeSpace"] != null)
                {
                    fs = (UInt64)envVar["FreeSpace"];
                    s = (UInt64)envVar["Size"];
                    fs = (fs / 1024) / 1024;
                    s = (s / 1024) / 1024;
                    dfs = ((double)fs / 1024.0);
                    ds = ((double)s / 1024.0);
                    dfsp = (dfs / ds) * 100;
                    hddnameStr += ("" + (String)envVar["Name"] + " (" + (String)envVar["VolumeName"] + ")\r\n");
                    hddfreespaceStr += ("" + dfs.ToString("F1") + " GB   of\r\n");
                    hddsizeStr += ("" + ds.ToString("F1") + " GB\r\n");
                    hddfreeprctStr += ("" + dfsp.ToString("F1") + " %\r\n");
                }
            }
            hddname.Text = hddnameStr;
            hddfreespace.Text = hddfreespaceStr;
            hddsize.Text = hddsizeStr;
            hddfreeprct.Text = hddfreeprctStr;
        }
    }
}